name: Terraform Pull Request Actions

on:
  pull_request:
    branches: [test, dev, master]
    paths-ignore: [README.md, .editorconfig, .gitignore, '**.md']

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Generate tfvars path and setup AWS creds
        if: github.event.pull_request.sender.login != 'ACT'
        run: |
          export GITHUB_REF=${github_ref//\"}
          if [[ "${GITHUB_REF}" == **"test" ]]; then
            echo "STAGE=test" >> $GITHUB_ENV
            echo "REGION=${{ secrets.AWS_TEST_REGION }}" >> $GITHUB_ENV
            echo "AWS_REGION=${{ secrets.AWS_TEST_REGION }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.TEST_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_ROLE_TO_ASSUME=${{ secrets.TEST_AWS_ROLE_TO_ASSUME }}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == **"dev" ]]; then
            echo "STAGE=dev" >> $GITHUB_ENV
            echo "REGION=${{ secrets.AWS_DEV_REGION }}" >> $GITHUB_ENV
            echo "AWS_REGION=${{ secrets.AWS_DEV_REGION }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.DEV_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_ROLE_TO_ASSUME=${{ secrets.DEV_AWS_ROLE_TO_ASSUME }}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == **"master" ]]; then
            echo "STAGE=prod" >> $GITHUB_ENV
            echo "REGION=${{ secrets.AWS_PROD_REGION }}" >> $GITHUB_ENV
            echo "AWS_REGION=${{ secrets.AWS_PROD_REGION }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_ROLE_TO_ASSUME=${{ secrets.PROD_AWS_ROLE_TO_ASSUME }}" >> $GITHUB_ENV
          else
            exit 1
          fi
        env:
          github_ref: ${{ toJson(github.base_ref) }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: github.event.pull_request.sender.login != 'ACT'
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200

      - name: Checkout source code
        uses: actions/checkout@v2
      
      - name: Global Repo Check
        run: |
          if [ -d "tfvars/${STAGE}/global" ]; then
            echo "Global Repo Detected"
            echo "REGION_PATH=global" >> $GITHUB_ENV
          else 
            echo "Regional Repo Detected"
            echo "REGION_PATH=${{ secrets.AWS_TEST_REGION }}" >> $GITHUB_ENV
          fi

      - name: Terraform Setup
        uses: bitdefendermdr/build-harness@master
        with:
          entrypoint: /usr/bin/make
          args: terraform/install

      - name: Terraform Init
        id: init
        continue-on-error: true
        uses: bitdefendermdr/build-harness@master
        with:
          entrypoint: /usr/bin/make
          args: tf/init/${STAGE}/${REGION_PATH}

      - name: Terraform Linting
        id: lint
        continue-on-error: true
        uses: bitdefendermdr/build-harness@master
        with:
          entrypoint: /usr/bin/make
          args: tf/lint

      - name: Terraform security scan
        id: sec
        continue-on-error: true
        uses: bitdefendermdr/build-harness@master
        with:
          entrypoint: /usr/bin/make
          args: tf/sec

      - name: Terraform Plan
        id: plan
        continue-on-error: true
        uses: bitdefendermdr/build-harness@master
        with:
          entrypoint: /usr/bin/make
          args: tf/plan/${STAGE}/${REGION_PATH}

      - uses: actions/github-script@v5
        if: github.event.pull_request.sender.login != 'ACT'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let plan_b64 = process.env.PLAN;
            let buff = Buffer.from(plan_b64, "base64");
            let plan = buff.toString("utf-8");
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Linting üñå\`${{ steps.lint.outcome }}\`
            #### Terraform Security Analysis ü§ñ\`${{ steps.sec.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${plan}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
